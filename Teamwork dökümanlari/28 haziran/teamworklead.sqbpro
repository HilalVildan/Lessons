<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/hilalvildansarioglu/Desktop/SQL/chinook.db" readonly="0" foreign_keys="0" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="0" synchronous="1"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3274"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainalbums"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="81"/><column index="2" value="300"/><column index="3" value="53"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="69"/><column index="2" value="66"/><column index="4" value="300"/><column index="5" value="300"/><column index="6" value="150"/><column index="7" value="48"/><column index="8" value="104"/><column index="9" value="144"/><column index="10" value="256"/><column index="11" value="232"/><column index="12" value="186"/><column index="13" value="79"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employee_leaves" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="39"/><column index="2" value="71"/><column index="3" value="136"/><column index="4" value="136"/><column index="5" value="62"/><column index="6" value="43"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="genres" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="49"/><column index="2" value="136"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="55"/><column index="2" value="69"/><column index="3" value="246"/><column index="4" value="300"/><column index="5" value="150"/><column index="6" value="68"/><column index="7" value="104"/><column index="8" value="144"/><column index="9" value="74"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="media_types" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="74"/><column index="2" value="206"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="81"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="67"/><column index="2" value="300"/><column index="3" value="50"/><column index="4" value="74"/><column index="5" value="49"/><column index="6" value="300"/><column index="7" value="109"/><column index="8" value="123"/><column index="9" value="60"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">----1. soru: ⦁ WRITE A QUERY THAT RETURNS TRACK NAME AND ITS COMPOSER FROM
TRACKS TABLE
SELECT name, Composer
FROM tracks;

---2. soru: ⦁ WRITE A QUERY THAT RETURNS ALL COLUMNS FROM TRACKS TABLE
SELECT*
FROM tracks

----3. soru: ⦁ WRITE A QUERY THAT RETURNS THE NAME OF COMPOSERS OF EACH TRCKS
SELECT DISTINCT Composer
FROM tracks


</sql><sql name="SQL 2">---4. soru :⦁ WRITE A QUERY THAT RETURNS UNIQUE ALBUMID, MEDIATYPEID FROM TRACKS TABLE
SELECT DISTINCT AlbumId, MediaTypeId
FROM tracks;

---5. soru: ⦁ WRITE A QUERY THAT RETURNS TRACK NAME AND TRACKID OF ‘Jorge Ben’
SELECT name, TrackId
FROM tracks
WHERE Composer=&quot;Jorge Ben&quot;;

---6. soru : ⦁ WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS GREATER THAN $25
SELECT *
FROM invoices
WHERE total &gt; 25;

----7. soru: ⦁ WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS LESS THAN $15. JUST RETURN 5 ROWS
SELECT * 
FROM invoices
WHERE total &lt; 15
LIMIT 5;

---8. soru: WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS GREATER THAN $10. THEN SORT THE TOTAL AMOUNTS IN DESCENDING ORDER, LASTLY DISPLAY TOP 2 ROWS
SELECT *
FROM invoices
WHERE total &gt; 10
ORDER by total DESC
LIMIT 2;

---9. soru : WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH
----------------BILLING COUNTRY IS NOT CANADA. THEN SORT THE TOTAL AMOUNTS IN
----------------ASCENDING ORDER, LASTLY DISPLAY TOP 10 ROWS
SELECT *
FROM invoices
WHERE BillingCity NOT in (&quot;Canada&quot;)
ORDER by total ASC
LIMIT 10;

---10. soru : WRITE A QUERY THAT RETURNS INVOICEID, CUSTOMERID AND TOTAL DOLLAR AMOUNT FOR EACH INVOICE. THEN SORT THEM FIRST BY CUSTOMERID IN ASCENDING, THEN TOTAL DOLLAR AMOUNT IN DESCENDING ORDER.
SELECT InvoiceId, CustomerId, total
FROM invoices
ORDER by CustomerId ASC, total DESC;

---11. soru: ⦁ WRITE A QUERY THAT RETURNS ALL TRACK NAMES THAT START WITH ‘B’ AND END WITH ‘S’
SELECT*
FROM tracks
WHERE name LIKE 'B%S';

---12. soru: ⦁ WRITE A QUERY THAT RETURNS THE NEWEST DATE AMONG THE INVOICE DATES BETWEEN 2008 AND 2011
SELECT InvoiceDate
FROM invoices
WHERE InvoiceDate BETWEEN '2008%' AND '2012%'
ORDER by InvoiceDate DESC
LIMIT 1;

---13. soru: ⦁ WRITE A QUERY THAT RETURNS THE FIRST AND LAST NAME OF THE CUSTOMERS WHO HAVE ORDERS FROM NORWAY AND BELGIUM
SELECT FirstName, LastName
FROM customers
WHERE Country IN ('Norway' , 'Belgium');
















</sql><sql name="teamworklead.sql">---14. soru: ⦁ WRITE A QUERY THAT RETURNS THE TRACK NAMES OF ‘ZAPPA’
SELECT Composer, name
FROM tracks
WHERE Composer LIKE '%ZAPPA%';

---15. SORU : ⦁ HOW MANY TRACKS AND INVOICES ARE THERE IN THE DIGITAL MUSIC STORE, DISPLAY SEPERATELY
SELECT COUNT(*)
FROM  tracks;

SELECT count(*)
FROM invoices;

---16. soru : ⦁ HOW MANY COMPOSERS ARE THERE IN THE DIGITAL MUSIC STORE
SELECT count(DISTINCT Composer)
FROM tracks;

----17. soru: ⦁ HOW MANY TRACKS DOES EACH ALBUM HAVE, DISPLAY ALBUMID AND NUMBER OF TRACKS SORTED FROM HIGHEST TO LOWEST
SELECT AlbumId, count(*) as number_of_tracks
FROM tracks 
GROUP by AlbumId
ORDER by number_of_tracks DESC;

----18. soru : ⦁ WRITE A QUERY THAT RETURNS TRACK NAME HAVING THE MINIMUM AND MAXIMUM DURATION, DISPLAY SEPERATELY
SELECT Name, MIN(Milliseconds)
FROM tracks;
SELECT Name, MAX(Milliseconds)
FROM tracks;

----19. soru : ⦁ WRITE A QUERY THAT RETURNS THE TRACKS HAVING DURATION LESS THAN THE AVERAGE DURATION
SELECT *
FROM tracks
WHERE Milliseconds &lt; (SELECT AVG(Milliseconds)FROM tracks);

---20. soru : ⦁ WRITE A QUERY THAT RETURNS THE TOTAL NUMBER OF EACH COMPOSER’s TRACK.
SELECT Composer count(*)
FROM tracks
GROUP by Composer;

----21. soru : ⦁ WRITE A QUERY THAT RETURNS THE GENRE OF EACH TRACK.
SELECT tracks.Name, genres.Name
FROM tracks
JOIN genres
ON tracks.GenreId = genres.GenreId;

----22. soru : ⦁ WRITE A QUERY THAT RETURNS THE ARTIST’s ALBUM INFO.
SELECT *
FROM artists
LEFT JOIN albums
ON albums.ArtistId = artists.ArtistId

----23. soru : ⦁ WRITE A QUERY THAT RETURNS THE MINIMUM DURATION OF THE TRACK IN EACH ALBUM. DISPLAY ALBUMID, ALBUM TITLE AND DURATION OF THE TRACK. THEN SORT THEM FROM HIGHEST TO LOWEST
SELECT tracks.AlbumId, albums.Title,
MIN(tracks.Milliseconds) AS min_duration
FROM tracks
JOIN albums
ON tracks.AlbumId = albums.AlbumId
GROUP BY tracks.AlbumId, albums.Title
ORDER BY min_duration DESC;

-----24. soru : ⦁ WRITE A QUERY THAT RETURNS ALBUMS WHOSE TOTAL DURATION IS HIGHER THAN 60 MIN. DISPLAY ALBUM TITLE AND THEIR DURATIONS. THEN SORT THE RESULT FROM HIGHEST TO LOWEST
SELECT albums.Title, SUM(tracks.Milliseconds) AS total_duration
FROM tracks
JOIN albums ON tracks.AlbumId = albums.AlbumId
GROUP BY tracks.AlbumId
HAVING total_duration &gt; 3600000
ORDER BY total_duration DESC;


----25. soru : ⦁ WRITE A QUERY THAT RETURNS TRACKID, TRACK NAME AND ALBUMID INFO OF THE ALBUM WHOSE TITLE ARE ‘Prenda Minha’, 'Heart of the Night' AND 'Out Of Exile'.
SELECT Trackid, Name, Albumid
FROM tracks
WHERE albumid IN (
SELECT AlbumId
FROM albums
WHERE Title IN ('Prenda Minha', 'Heart of the Night', 'Out Of Exile'));</sql><sql name="SQL 5"></sql><current_tab id="2"/></tab_sql></sqlb_project>
